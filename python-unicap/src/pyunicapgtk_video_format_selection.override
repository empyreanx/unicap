%%
headers
#include <Python.h>
#include <pygobject.h>
#include <pygtk/pygtk.h>
#include <unicap.h>
#include "unicapmodule.h"
#include "utils.h"
#include "unicapgtk.h"
%%
modulename unicapgtk
%%
import gtk.HBox as PyGtkHBox_Type
%%
new-constructor UNICAPGTK_TYPE_VIDEO_FORMAT_SELECTION
%%
override unicapgtk_video_format_selection_new kwargs
static int 
_wrap_unicapgtk_video_format_selection_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
   static char* kwlist[] = { "device_id", "device", NULL };
   unicap_device_t device_spec;
   unicap_device_t device;
   char *device_id = NULL;
   
   if( import_unicap() < 0 ){
      PyErr_SetString( PyExc_RuntimeError, "Could not import unicap module" );
      return -1;
   }

   if (!PyArg_ParseTupleAndKeywords(args, kwargs,
				    "|O&:unicapgtk.VideoDisplay.__init__",
				    kwlist, conv_device_identifier, &device_id ))
      return -1;

   pygobject_constructv(self, 0, NULL);
   if( device_id ){
      unicap_void_device( &device );
      unicap_void_device( &device_spec );
      if( device_id )
	 strcpy( device_spec.identifier, device_id );

      unicap_reenumerate_devices( NULL );

      if( !SUCCESS( unicap_enumerate_devices( &device_spec, &device, 0 ) ) ){
	 PyErr_SetString( PyExc_RuntimeError, "failed to enumerate device" );
	 return -1;
      }
      if( !SUCCESS( unicapgtk_video_format_selection_set_device( UNICAPGTK_VIDEO_FORMAT_SELECTION( self->obj ), &device ) ) ){
	 PyErr_SetString( PyExc_RuntimeError, "failed to set device" );
	 return -1;
      }
   }

   return 0;
}
%%
override unicapgtk_video_format_selection_get_device kwargs
static PyObject *
_wrap_unicapgtk_video_format_selection_get_device(PyGObject *self, PyObject *args, PyObject *kwargs)
{
   unicap_handle_t handle;
   PyObject *obj;   
   
   handle = unicapgtk_video_format_selection_get_handle( UNICAPGTK_VIDEO_FORMAT_SELECTION( self->obj ) );

   obj = UnicapDevice_new_from_handle( handle );

   return obj;
}
%%
override unicapgtk_video_format_selection_set_device kwargs
static PyObject *
_wrap_unicapgtk_video_format_selection_set_device( PyGObject *self, PyObject *args, PyObject *kwargs)
{
   unicap_device_t dev_spec, device;
   char *identifier;

   static char *kwlist[] = { "device", NULL };

   if( !PyArg_ParseTupleAndKeywords( args, kwargs, "O&", kwlist, conv_device_identifier, &identifier ) )
   {
      PyErr_SetString( PyExc_ValueError, "Invalid argument" );
      return NULL;
   }

   unicap_void_device( &dev_spec );
   strcpy( dev_spec.identifier, identifier );
   if( !SUCCESS( unicap_enumerate_devices( &dev_spec, &device, 0 ) ) )
   {
      PyErr_SetString( PyExc_IOError, "Could not enumerate device" );
      return NULL;   
   }
   
   if( !SUCCESS( unicapgtk_video_format_selection_set_device( UNICAPGTK_VIDEO_FORMAT_SELECTION( self->obj ), &device ) ) ){
      PyErr_SetString( PyExc_IOError, "Failed to set device" );
      return NULL;
   }

   Py_INCREF( Py_None );
   return( Py_None );   
}
%%
override unicapgtk_video_format_selection_get_format kwargs
static PyObject *
_wrap_unicapgtk_video_format_selection_get_format( PyGObject *self, PyObject *args, PyObject *kwargs)
{
   PyObject *result = NULL;
   unicap_format_t *format;
   
   format = unicapgtk_video_format_selection_get_format( UNICAPGTK_VIDEO_FORMAT_SELECTION( self->obj ) );
   
   result = build_video_format( format );
   
   return result;
}   
%%
